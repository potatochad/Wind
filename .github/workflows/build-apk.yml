name: Build APK

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        run: echo "‚úÖ Code checkout complete"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
        run: java -version && echo "‚úÖ JDK setup complete"

      - name: Prepare Keystore
        run: |
          set -e
          echo "üîπ Starting keystore setup..."
          KEYSTORE_FILE=my-release-key.keystore
          if [ -f "$KEYSTORE_FILE" ]; then
            echo "‚ö†Ô∏è Keystore already exists. Overwriting..."
          else
            echo "‚ÑπÔ∏è Keystore does not exist. Creating from secret..."
          fi
          echo "$KEYSTORE_BASE64" | base64 --decode > "$KEYSTORE_FILE"
          echo "‚úÖ Keystore ready: $KEYSTORE_FILE"
          ls -lh "$KEYSTORE_FILE"
          file "$KEYSTORE_FILE"

      - name: Verify Keystore
        run: |
          set -e
          echo "üîπ Verifying keystore..."
          if keytool -list -v -keystore my-release-key.keystore -storepass "$KEYSTORE_PASSWORD"; then
            echo "‚úÖ Keystore verification passed"
          else
            echo "‚ùå Keystore verification failed! Exiting immediately."
            exit 1
          fi

      - name: Build APK
        run: |
          set -e
          echo "üîπ Starting APK build (warnings hidden, errors only)..."
          # Redirect stdout to /dev/null (hide normal logs), keep stderr (errors) and pipe to tee
          ./gradlew assembleRelease -x ktlintCheck -x ktlintKotlinScriptCheck \
            -Pandroid.injected.signing.store.file=my-release-key.keystore \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD" \
            > >(grep -v -i warning) 2> >(tee gradle_errors.log >&2) || { 
              echo "‚ùå APK build/signing failed! Check gradle_errors.log"; 
              exit 1; 
            }
          echo "‚úÖ APK build completed successfully"
          if [ ! -f app/build/outputs/apk/release/app-release.apk ]; then
            echo "‚ùå APK not found! Build failed."
            exit 1
          fi

      - name: Verify APK Signing
        run: |
          set -e
          echo "üîπ Verifying APK signing..."
          APKSIGNER=$(find "$ANDROID_SDK_ROOT/build-tools" -name apksigner | sort -V | tail -n 1)
          echo "Using apksigner: $APKSIGNER"
          "$APKSIGNER" verify --print-certs app/build/outputs/apk/release/app-release.apk
          echo "‚úÖ APK signing verified successfully"

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: app/build/outputs/apk/release/app-release.apk
        run: echo "‚úÖ APK uploaded as artifact"
      - name: Verify Keystore
        run: |
          echo "Checking keystore file..."
          ls -lh my-release-key.keystore
          file my-release-key.keystore
          
          echo "Listing keystore contents..."
          if ! keytool -list -keystore my-release-key.keystore -storepass "$KEYSTORE_PASSWORD"; then
            echo "‚ùå Keystore verification failed! Check your secret or Base64 encoding."
            exit 1
          fi
          echo "‚úÖ Keystore verification passed"


      - name: Build APK
        run: |
          ./gradlew assembleRelease -x ktlintCheck -x ktlintKotlinScriptCheck \
          -Pandroid.injected.signing.store.file=my-release-key.keystore \
          -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD 2> >(grep -v -i warning >&2) || { 
          echo "‚ö†Ô∏è APK signing failed"; exit 1; 
          }


      - name: Verify APK
        run: |
          APKSIGNER=$(find "$ANDROID_SDK_ROOT/build-tools" -name apksigner | sort -V | tail -n 1)
          "$APKSIGNER" verify --print-certs app/build/outputs/apk/debug/app-debug-signed.apk

      - name: Ship APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-signed.apk
          path: app/build/outputs/apk/debug/app-debug-signed.apk
