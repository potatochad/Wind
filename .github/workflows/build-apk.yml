name: Build APK

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify checkout
        run: echo "‚úÖ Code checkout complete"

      # Step 2: Set up Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Verify JDK setup
        run: java -version && echo "‚úÖ JDK setup complete"

      # Step 3: Prepare Keystore
      - name: Prepare Keystore
        run: |
          set -e
          echo "üîπ Starting keystore setup..."
          KEYSTORE_FILE=my-release-key.keystore
          
          # Debug Base64 length
          echo "Keystore secret length: ${#KEYSTORE_BASE64}"
          
          # Decode safely (trim whitespace + fix multi-line issues)
          echo "$KEYSTORE_BASE64" | tr -d '\n' | base64 --decode > "$KEYSTORE_FILE" || {
            echo "‚ùå Failed to decode Base64 keystore secret! Check KEYSTORE_BASE64 value."
            exit 1
          }

          echo "‚úÖ Keystore file created at: $KEYSTORE_FILE"
          echo "File info:"
          ls -lh "$KEYSTORE_FILE"
          echo "First bytes (hex):"
          xxd -l 32 "$KEYSTORE_FILE" || echo "Could not read hex preview"
          echo "File type:"
          file "$KEYSTORE_FILE"

      # Step 4: Verify Keystore
      - name: Verify Keystore
        run: |
          set -e
          echo "üîπ Verifying keystore..."
          echo "Keystore file type check:"
          file my-release-key.keystore
          
          # Try multiple formats if default fails
          for TYPE in JKS PKCS12; do
            echo "Attempting to load as $TYPE..."
            if keytool -list -storetype $TYPE -v -keystore my-release-key.keystore -storepass "$KEYSTORE_PASSWORD" >/dev/null 2>&1; then
              echo "‚úÖ Loaded successfully as $TYPE keystore"
              echo "::set-output name=keystore_type::$TYPE"
              exit 0
            fi
          done

          echo "‚ùå Failed to recognize keystore format. Possible causes:"
          echo " - Wrong Base64 encoding (make sure you used 'base64 my-release-key.keystore' to generate it)"
          echo " - Secret saved with line breaks in GitHub"
          echo " - Wrong keystore password"
          exit 1

      # Step 5: Grant permission for Gradle wrapper
      - name: Grant Gradlew permissions
        run: chmod +x gradlew

      # Step 6: Build signed Release APK
      - name: Build Release APK
        run: |
          set -e
          echo "üîπ Building signed release APK..."
          ./gradlew assembleRelease -x ktlintCheck -x ktlintKotlinScriptCheck \
            -Pandroid.injected.signing.store.file=my-release-key.keystore \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD" \
            > >(grep -v -i warning) 2> >(tee gradle_errors.log >&2) || { 
              echo "‚ùå Build failed! Check gradle_errors.log"; 
              exit 1; 
            }
          echo "‚úÖ Build completed successfully"
          ls -lh app/build/outputs/apk/release/

      # Step 7: Verify APK signing
      - name: Verify APK Signing
        run: |
          set -e
          echo "üîπ Verifying APK signing..."
          APKSIGNER=$(find "$ANDROID_SDK_ROOT/build-tools" -name apksigner | sort -V | tail -n 1)
          echo "Using apksigner: $APKSIGNER"
          "$APKSIGNER" verify --print-certs app/build/outputs/apk/release/app-release.apk
          echo "‚úÖ APK signing verified successfully"

      # Step 8: Upload release APK
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: app/build/outputs/apk/release/app-release.apk
